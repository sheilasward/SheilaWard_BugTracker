@using Microsoft.AspNet.Identity;
@using SheilaWard_BugTracker.Helpers;
@using SheilaWard_BugTracker.Models;

@{

    var ticketHelper = new TicketDecisionHelper();
    var projectHelper = new ProjectsHelper();
    var notfHelper = new NotificationHelper();
    ApplicationDbContext db = new ApplicationDbContext();
    var userId = User.Identity.GetUserId();
}

<style>
    .chartHR {
        border: 5px solid;
        border-radius: 5px;
        background: linear-gradient(black, red);
    }

    .chart250 {
        height: 275px;
    }
</style>

<section class="content-header">
    <h1>
        Dashboard
        <small>Control panel</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Dashboard</li>
    </ol>
</section>

<!-- Main content -->
<section class="content">
    <!-- Small boxes (Stat box) -->
    <div class="row">
        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-aqua">
                <div class="inner">
                    @{
                        var ticketCount = @ticketHelper.GetTicketCount("New/Unassigned") + @ticketHelper.GetTicketCount("Active/Assigned");
                        <h3>@ticketCount</h3>
                    }


                    <p>TICKETS IN PROGRESS</p>
                </div>
                <div class="icon">
                    <i class="ion ion-bug"></i>
                </div>
                <a href="@Url.Action("Index", "Tickets", new { proj = "MyTickets", stat = "InProg"})" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-green">
                <div class="inner">
                    <h3>@projectHelper.CountUserProjects()</h3>

                    <p>PROJECTS IN PROGRESS</p>
                </div>
                <div class="icon">
                    <i class="ion ion-lightbulb"></i>
                </div>
                <a href="@Url.Action("Index", "Projects", new { proj = "MyProjects" })" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-yellow">
                <div class="inner">
                    @{
                        ICollection<Project> myProjects = projectHelper.ListUserProjects(userId);
                        ICollection<ApplicationUser> UsersOnProjects = new List<ApplicationUser>();
                        ICollection<ApplicationUser> UsersOnThisProject = new List<ApplicationUser>();
                        int userCount = 0;
                        foreach (var project in myProjects)
                        {
                            UsersOnThisProject = projectHelper.UsersOnProject(project.Id);
                            foreach (var user in UsersOnThisProject)
                            {
                                if (!UsersOnProjects.Contains(user))
                                {
                                    UsersOnProjects.Add(user);
                                    userCount++;
                                }
                            }
                        }
                        <h3>@userCount</h3>
                    }


                    <p>USERS ON MY PROJECTS</p>
                </div>
                <div class="icon">
                    <i class="ion ion-person"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-red">
                <div class="inner">
                    <h3>@notfHelper.GetAllUserNotificationCount()</h3>

                    <p>NOTIFICATIONS</p>
                </div>
                <div class="icon">
                    <i class="ion ion-ios-bell"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->
    </div>
    <!-- /.row -->
    <!-- Main row -->
    <div class="row">
        <!-- Left col -->
        <section class="col-lg-7 connectedSortable"></section>
        <!-- /.Left col -->
        <!-- right col (We are only adding the ID to make the widgets sortable)-->
        <section class="col-lg-5 connectedSortable"></section>
        <!-- right col -->
    </div>
    <!-- /.row (main row) -->
    <!-- Starting with Jason's example here -->
    <hr class="chartHR" />

    <div class="row">
        <div id="HardCodedMorrisBarChart1" class="col-md-6 chart250"></div>
        <div id="HardCodedMorrisBarChart2" class="col-md-6 chart250"></div>
    </div>

    <hr class="chartHR" />

    <div class="row">
        <div id="RealMorrisBarChart" class="col-md-6 chart250"></div>
        <div id="RealMorrisDonutChart" class="col-md-6 chart250"></div>
    </div>

    <hr class="chartHR" />

    <div class="row">
        <div id="RealFusion3DBarChart" class="col-md-6 chart250"></div>
        <div id="RealDonutChart1" class="col-md-6 chart250"></div>
    </div>

    <hr class="chartHR" />
    <div class="row">
        <div class="col-md-12">
            <canvas id="myChart" width="400" height="400"></canvas>
        </div>
    </div>
    
</section>

@section scripts
{
    <script>
        new Morris.Bar({
            element: 'HardCodedMorrisBarChart1',
            gridTextSize: 8,
            xLabelAngle: 45,
            data: [
                { label: 'New/Unassigned', value: 20 },
                { label: 'Active/Assigned', value: 50 },
                { label: 'Inactive', value: 5 },
                { label: 'Completed', value: 150 },
                { label: 'Archived', value: 200 },
            ],
            xkey: 'label',
            ykeys: ['value'],
            labels: ['Ticket Count'],
            resize: true
        });
    </script>

    <script type="text/javascript">
        $(function () {
            $.post('@Url.Action("GetHardCodedMorrisBarData", "Charts")').then(function (response) {
                new Morris.Bar({
                    element: 'HardCodedMorrisBarChart2',
                    data: response,
                    xkey: 'label',
                    ykeys: ['value'],
                    labels: ['Ticket Count'],
                    resize: true
                });
            });
        });
    </script>

    <script type="text/javascript">
        $(function () {
            $.post('@Url.Action("GetRealMorrisData", "Charts")').then(function (response) {
                new Morris.Bar({
                    element: 'RealMorrisBarChart',
                    data: response,
                    gridTextSize: 10,
                    xLabelAngle: 65,
                    xkey: 'label',
                    ykeys: ['value'],
                    labels: ['Ticket Count'],
                    resize: true
                });
            });
        });
    </script>

    <script type="text/javascript">
        $(function () {
            $.post('@Url.Action("GetRealMorrisData", "Charts")').then(function (response) {
                new Morris.Donut({
                    element: 'RealMorrisDonutChart',
                    data: response,
                    gridTextSize: 10,
                    xkey: 'label',
                    ykeys: ['value'],
                    labels: ['Ticket Count'],
                    resize: true
                });
            });
        });

    </script>

    
    <script>
        $.post('@Url.Action("GetRealChartJsData", "Charts")').then(function (response) {
            var ctx = document.getElementById('myChart').getContext('2d');
            var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: response.Labels,
                datasets: [{
                    label: 'Ticket Statuses',
                    data: response.Values,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)'

                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
        });

        
    </script>
}
